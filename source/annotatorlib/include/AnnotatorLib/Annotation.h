// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_ANNOTATION_H
#define ANNOTATOR_ANNOTATORLIB_ANNOTATION_H

/************************************************************
 Annotation class header
 ************************************************************/
#include <vector>

#include <AnnotatorLib/AnnotatorLibDatastructs.h>
#include <AnnotatorLib/annotatorlib_api.h>

namespace AnnotatorLib {

class Attribute;
class Frame;
class Object;

/************************************************************/
/**
 * 
 */
class ANNOTATORLIB_API Annotation {
public:

    Annotation();
    Annotation(const Annotation& obj);
    Annotation(AnnotationType type);
    Annotation(unsigned long id);

	/**
	 * 
	 * @return id 
	 */
    static unsigned long genId();

    unsigned long getId();

    std::vector<Attribute *> getAttributes();
    bool addAttribute(Attribute* attribute);
    bool removeAttribute(Attribute* attribute);

    Frame *getFrame();
    void setFrame(Frame* frame);

    Object *getObject();
    void setObject(Object* object);

    AnnotationType getType();
    void setType(AnnotationType type);

    /**
     * @brief setPosition
     * @param x
     * @param y
     */
    void setPosition(float x, float y);
    /**
     * @brief setPosition
     * @param x
     * @param y
     * @param hradius the radius horizontally
     * @param vradius the radius vertically
     */
    void setPosition(float x, float y, float hradius, float vradius);
    /**
     * @brief setPositionWH
     * @param x
     * @param y
     * @param width
     * @param height
     */
    void setPositionWH(float x, float y, int width, int height);
    int getX();
    void setX(float x);
    int getY();
    void setY(float y);
    float getHRadius();
    void setHRadius(float hradius);
    float getVRadius();
    void setVRadius(float vradius);


    void setNext(Annotation * next);
    Annotation *getNext();
    void setPrevious(Annotation * previous);
    Annotation *getPrevious();

    Annotation *getFirst();
    Annotation *getLast();
    bool isLast();
    bool isFirst();

    void setFinished(bool ended);
    bool isFinished();

    void setInterpolated(bool interpolated);
    bool isInterpolated();

protected:
    /**
     *
     */
    unsigned long id = 0;
	/**
	 * 
	 */
    std::vector<Attribute*> attributes;
	/**
	 * 
	 */
    Object *object;

	/**
	 * 
	 */
    Frame *frame;

    AnnotationType type = AnnotationType::RECTANGLE;

    Annotation * next = nullptr;
    Annotation * previous = nullptr;

    ///////////////////////////////

    float x = 0;
    float y = 0;

    float hradius = 0;
    float vradius = 0;

    bool interpolated = false;

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace AnnotatorLib

/************************************************************
 End of Annotation class header
 ************************************************************/

#endif
