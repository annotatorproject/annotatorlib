// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_FRAME_H
#define ANNOTATOR_ANNOTATORLIB_FRAME_H

/************************************************************
 Frame class header
 ************************************************************/
#include <vector>

#include <AnnotatorLib/annotatorlib_api.h>
#include <AnnotatorLib/AnnotatorLibDatastructs.h>

#include "AnnotatorLib/Annotation.h"

namespace AnnotatorLib {

class Annotation;
class Attribute;

/************************************************************/

/**
 * @brief The Frame class
 * Representing a frame in a movie or an image.
 */
class ANNOTATORLIB_API Frame {

public:

    Frame() = delete;
    Frame(unsigned long frame_nmb);
    ~Frame();

    std::vector<Annotation*> getAnnotations() const;
    bool hasAnnotations() const;
    bool addAnnotation(Annotation* annotation);
    bool removeAnnotation(Annotation* annotation);

    std::vector<Attribute*> getAttributes() const;

    unsigned long getFrameNumber() const;

    bool equals(Frame *other) const;

protected:
    /**
     *
     */
    const unsigned long frame_number = 0;

private:
    std::vector<Annotation*> annotations;


};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace AnnotatorLib

/************************************************************
 End of Frame class header
 ************************************************************/

#endif
