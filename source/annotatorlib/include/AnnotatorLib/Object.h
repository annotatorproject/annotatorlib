// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_OBJECT_H
#define ANNOTATOR_ANNOTATORLIB_OBJECT_H


/************************************************************
 Object class header
 ************************************************************/

#include <string>
#include <vector>

#include <AnnotatorLib/annotatorlib_api.h>
#include <AnnotatorLib/AnnotatorLibDatastructs.h>

#include "AnnotatorLib/Annotation.h"
#include "AnnotatorLib/Attribute.h"
#include "AnnotatorLib/Frame.h"

namespace AnnotatorLib {

    class Class;

/************************************************************/
/**
 * @brief The Object class that represents an object of a specific class.
 */
class ANNOTATORLIB_API Object {
public:

    const unsigned long id = 0;

    Object();
    Object(unsigned long id);

	/**
	 * 
	 * @return id 
	 */
    static unsigned long genId();

    unsigned long getId() const;

    std::string getName();
    void setName(std::string name);

    Class *getClass() const;
    void setClass(Class *c);

    std::vector<Attribute*> getAttributes() const;
    bool addAttribute(Attribute* attribute);
    bool removeAttribute(Attribute* attribute);

//    std::vector<Class*> getClasses() const;
//    bool addClass(Class* c);
//    bool removeClass(Class* c);

    Annotation *getFirstAnnotation() const;
    Annotation *getFirstAnnotation(AnnotatorLib::Frame *frame) const;
    std::vector<Annotation*> getAnnotations() const;
    bool addAnnotation(Annotation* annotation);
    bool removeAnnotation(Annotation* annotation);

    std::vector<Frame*> getFrames() const;
    bool addFrame(Frame* frame);
    bool removeFrame(Frame* frame);

    bool appearsInFrame(Frame *frame) const;

    bool isVisible() const { return visible; }
    void setVisible( bool v);

private:
    std::string name = "unnamed";
    bool visible = true;

    Class *objectClass = nullptr;
	/**
	 * 
	 */
    std::vector<Attribute*> attributes;
	/**
	 * 
	 */
    std::vector<Annotation*> annotations;
	/**
	 * 
	 */
    std::vector<Frame*> frames;

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

} // of namespace AnnotatorLib

/************************************************************
 End of Object class header
 ************************************************************/

#endif
