// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_OBJECT_H
#define ANNOTATOR_ANNOTATORLIB_OBJECT_H

/************************************************************
 Object class header
 ************************************************************/

#include <string>
#include <map>
#include <vector>
#include <memory>
#include <AnnotatorLib/AnnotatorLibDatastructs.h>
#include <AnnotatorLib/annotatorlib_api.h>
#include "AnnotatorLib/Annotation.h"
#include "AnnotatorLib/Attribute.h"
#include "AnnotatorLib/Frame.h"

using std::weak_ptr;
using std::shared_ptr;

namespace AnnotatorLib {

class Class;

/************************************************************/
/**
 * @brief The Object class that represents an object of a specific class.
 */
class ANNOTATORLIB_API Object {

friend class Annotation; //private access for register/unregister

 public:
  const unsigned long id = 0;

  /**
   * @return id
   */
  static unsigned long genId();

  Object();
  Object(const shared_ptr<Class> c);
  Object(unsigned long id,
         const shared_ptr<Class> c = shared_ptr<Class>(nullptr));

  ~Object() {}

  unsigned long getId() const;

  std::string getName() const;
  void setName(std::string name);

  shared_ptr<Class> getClass() const;
  void setClass(shared_ptr<Class> c);

  std::vector<shared_ptr<Attribute>> getAttributes() const;
  bool addAttribute(shared_ptr<Attribute> attribute);
  bool removeAttribute(shared_ptr<Attribute> attribute);

  shared_ptr<Annotation> getFirstAnnotation() const;
  shared_ptr<Annotation> getLastAnnotation() const;
  std::map<unsigned long, weak_ptr<Annotation>> const& getAnnotations() const;
  bool addAnnotation(shared_ptr<Annotation> annotation);
  bool removeAnnotation( shared_ptr<Annotation> annotation);
  bool hasAnnotations() const { return !annotations.empty(); }

  /**
   * @brief Get all frames of this object.
   * Attention: Heavy operation!
   * @return
   */
  std::vector<shared_ptr<Frame>> getFrames() const;
  /**
   * This method is deprecated.
   * Use session getAnnoation(frame, object) and check for nullptr.
   * @brief appearsInFrame
   * @param frame
   * @return
   */
  bool appearsInFrame(const shared_ptr<Frame> frame) const;
  /**
   * This method is deprecated.
   * Use session getAnnoation(frame, object) instead.
   * @brief getAnnotation
   * @param frame
   * @return
   */
  shared_ptr<Annotation> getAnnotation(const shared_ptr<Frame> frame) const;
  void findClosestKeyFrames(const shared_ptr<Frame> target_frame,
                        shared_ptr<Annotation>& left,
                        shared_ptr<Annotation>& right) const;

  void setActive(bool active);

  /**
   * @brief isActive
   * Returns if object is active or blocked for new annotations.
   * @return
   */
  bool isActive() const;

 protected:
  std::string genName();
  bool addAnnotation(weak_ptr<Annotation> annotation);
  bool removeAnnotation( unsigned int frame_nmb);

  std::string name;
  shared_ptr<Class> objectClass;
  std::vector<shared_ptr<Attribute>> attributes;
  std::map<unsigned long, weak_ptr<Annotation>> annotations;

};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

}  // of namespace AnnotatorLib

/************************************************************
 End of Object class header
 ************************************************************/

#endif
