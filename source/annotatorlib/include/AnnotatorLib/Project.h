// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_PROJECT_H
#define ANNOTATOR_ANNOTATORLIB_PROJECT_H

/************************************************************
 Project class header
 ************************************************************/

#include <string>

#include <QtXml/QDomDocument>
#include <QtXml/QDomElement>

#include <AnnotatorLib/AnnotatorLibDatastructs.h>
#include <AnnotatorLib/annotatorlib_api.h>

#include <AnnotatorLib/ImageSet.h>
#include <AnnotatorLib/Session.h>

namespace AnnotatorLib {

namespace Storage {
class AbstractStorage;
}

/************************************************************/
/**
 *
 */
class ANNOTATORLIB_API Project {
 protected:
  Project();

  Project(std::string name, ImageSetType imageSetType, std::string imageSetPath,
          StorageType storageType, std::string storagePath);

  /**
   *
   */
  std::string name = "";
  /**
   *
   */
  std::string path = "";
  /**
   *
   */
  ImageSetType imageSetType = ImageSetType::UNKNOWN;
  /**
   *
   */
  ImageSet *imageSet = nullptr;
  /**
   *
   */

  StorageType storageType = StorageType::UNKNOWN;
  /**
   * @brief storagePath
   */
  std::string storagePath = "";
  /**
   *
   */
  Session *session = nullptr;

 public:
  ~Project();

  Session *getSession();

  AnnotatorLib::Storage::AbstractStorage *getStorage();

  std::string getName();

  ImageSet *getImageSet();

  /**
   *
   * @param path
   * @return project
   */
  static Project *load(std::string path);

  /**
   *
   */
  void load();

  void loadImageSet(QDomElement &root, ImageSetType &type,
                    std::string &imageSetPath);

  void loadStorage(QDomElement &root, StorageType &type,
                   std::string &storagePath);

  void loadRoot(QDomDocument &doc, QDomElement &root, std::string &name);

  void loadSession();

  /**
   *
   * @param project
   * @param path
   */
  static void save(Project *project, std::string path);

  /**
   *
   */
  void save();

  QDomElement saveImageSet(QDomDocument &doc);

  QDomElement saveStorage(QDomDocument &doc);

  QDomElement saveRoot(QDomDocument &doc);

  void saveSession();

  static Project *create(std::string name, ImageSetType imageSetType,
                         std::string imageSetPath, StorageType storageType,
                         std::string storagePath);

  static Project *create(std::string name, std::string imageSetType,
                         std::string imageSetPath, std::string storageType,
                         std::string storagePath);

  bool equals(Project *other);

  std::string getImageSetPath();

  void setPath(std::string path);

  std::string getPath();
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

}  // of namespace AnnotatorLib

/************************************************************
 End of Project class header
 ************************************************************/

#endif
