// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#ifndef ANNOTATOR_ANNOTATORLIB_SESSION_H
#define ANNOTATOR_ANNOTATORLIB_SESSION_H

/************************************************************
 Session class header
 ************************************************************/
#include <vector>
#include <unordered_map>
#include <memory> //smart pointer
#include <AnnotatorLib/AnnotatorLibDatastructs.h>
#include <AnnotatorLib/annotatorlib_api.h>
#include <AnnotatorLib/Annotation.h>
#include <AnnotatorLib/AnnotatorAlgoInterface.h>
#include <AnnotatorLib/Attribute.h>
#include <AnnotatorLib/Class.h>
#include <AnnotatorLib/Commands/Command.h>
#include <AnnotatorLib/Frame.h>
#include <AnnotatorLib/Object.h>

using std::shared_ptr;
using std::unordered_map;

namespace AnnotatorLib {

/************************************************************/
/**
 * @brief The Session class
 * Contains pointers to all data within a session.
 */
class ANNOTATORLIB_API Session {
 public:
  Session();
  virtual ~Session();

  // Attributes

//  virtual std::pair<std::unordered_map<unsigned long, std::shared_ptr<Attribute>>::const_iterator,
//  std::unordered_map<unsigned long, std::shared_ptr<Attribute>>::const_iterator> getAttributesIterator() const;

  virtual std::unordered_map<unsigned long, std::shared_ptr<Attribute>> const& getAttributes() const { return attributes;}
  /**
   * @brief Add an attribute to the session.
   * @param c
   * @return
   */
  virtual bool addAttribute(Attribute *attribute);
  virtual bool removeAttribute(Attribute *attribute);
  virtual Attribute *getAttribute(unsigned long id) const;

  // Annotations

//  virtual std::pair<std::unordered_map<unsigned long, std::shared_ptr<Annotation>>::const_iterator,
//  std::unordered_map<unsigned long, std::shared_ptr<Annotation>>::const_iterator> getAnnotationsIterator() const;

  virtual std::unordered_map<unsigned long, std::shared_ptr<Annotation>> const& getAnnotations() const { return annotations;}

  /**
   * @brief Will add the given annotation, the associated object
   * and frame to this session. Checks for duplicates.
   * @param annotation
   * @return
   */
  virtual bool addAnnotation(Annotation *annotation);
  virtual bool removeAnnotation(Annotation *annotation, bool unregister = true);
  virtual Annotation *getAnnotation(unsigned long id) const;

  // Classes
  virtual std::unordered_map<std::string, std::shared_ptr<Class>> const& getClasses() const { return classes; }

  /**
   * @brief Add a class to the session.
   * @param c
   * @return
   */
  virtual bool addClass(Class *c);
  virtual bool removeClass(Class *c);
  virtual Class *getClass(std::string name) const;

  // Frames

//  /**
//   * Get a read-only iterator (first: begin, second: end).
//   * @brief getFramesIterator
//   * @return
//   */
//  virtual std::pair<std::unordered_map<unsigned long, std::shared_ptr<Frame>>::const_iterator,
//  std::unordered_map<unsigned long, std::shared_ptr<Frame>>::const_iterator> getFramesIterator() const;

  virtual std::unordered_map<unsigned long, std::shared_ptr<Frame>> const& getFrames() const { return frames; }

  /**
   * @brief Will add the given frame and all annotations, objects
   * within this frame to this session. Checks for duplicates.
   * @param frame
   * @return
   */
  virtual bool addFrame(Frame *frame);
  virtual bool removeFrame(Frame *frame, bool remove_annotations = true);
  /**
   * @brief getFrame by given number.
   * If it does not exist we create it.
   * @param number
   * @return The Frame by given Frame Number
   */
  virtual Frame *getFrame(unsigned long number);

  /**
   * @brief Will add the given object and all associated annotations, plus
   * frames
   * to this session. Checks for duplicates.
   * @param object
   * @return
   */
  virtual bool addObject(Object *object);
  virtual bool removeObject(Object *object, bool remove_annotations = true);  
  virtual Object *getObject(unsigned long id) const;
  virtual std::unordered_map<unsigned long, std::shared_ptr<Object>> const& getObjects() const { return objects; }

  /**
   * Executes the command and manages all involved memory.
   * @brief execute
   * @param command
   * @return
   */
  virtual bool execute(AnnotatorLib::Commands::Command *command);
  virtual bool redo();
  virtual bool undo();

 private:
  std::unordered_map<unsigned long, std::shared_ptr<Frame>> frames;
  std::unordered_map<unsigned long, std::shared_ptr<Object>> objects;
  std::unordered_map<unsigned long, std::shared_ptr<Attribute>> attributes;
  std::unordered_map<unsigned long, std::shared_ptr<Annotation>> annotations;
  std::unordered_map<std::string, std::shared_ptr<Class>> classes;

  unsigned int commandIndex = 0;
  std::vector<std::shared_ptr<AnnotatorLib::Commands::Command>> commands;

  AnnotatorAlgo::AnnotatorAlgoInterface *annotatorAlgo;
};
/************************************************************/
/* External declarations (package visibility)               */
/************************************************************/

/* Inline functions                                         */

}  // of namespace AnnotatorLib

/************************************************************
 End of Session class header
 ************************************************************/

#endif
