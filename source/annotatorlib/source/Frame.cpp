// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Annotator_AnnotatorLib_Frame_BODY

/************************************************************
 Frame class body
 ************************************************************/

// include associated header file
#include <algorithm>
#include "AnnotatorLib/Frame.h"

// Derived includes directives

namespace AnnotatorLib {

Frame::Frame(unsigned long number)
{
    this->number = number;
}

std::vector<Annotation *> Frame::getAnnotations()
{
    return annotations;
}

bool Frame::addAnnotation(Annotation *annotation)
{
    if (annotation != nullptr && std::find(annotations.begin(), annotations.end(), annotation) == annotations.end()) {
        annotations.push_back(annotation);
        annotation->setFrame(this);
        return true;
    }
    return false;
}

bool Frame::removeAnnotation(Annotation *annotation)
{
    std::vector<Annotation *>::const_iterator position = std::find(annotations.begin(), annotations.end(), annotation);
    if (position != annotations.end()){
        annotations.erase(position);
        return true;
    }
    return false;
}

std::vector<Attribute *> Frame::getAttributes()
{
    std::vector<Attribute *> attributes;

    for (std::vector<Annotation *>::const_iterator it = annotations.begin() ; it != annotations.end(); ++it)
    {
        Annotation * annotation = *it;
        for(Attribute *attribute: annotation->getAttributes()){
            if(attribute != nullptr)
                attributes.push_back(attribute);
        }
    }

    // remove duplicates
    std::sort( attributes.begin(), attributes.end() );
    attributes.erase( std::unique( attributes.begin(), attributes.end() ), attributes.end() );

    return attributes;
}

unsigned long Frame::getNumber()
{
    return number;
}

bool Frame::equals(Frame *other)
{
    if(this == other)
        return true;
    if(this->number != other->number)
        return false;
    if(this->annotations.size() != other->annotations.size())
        return false;
    return true;
}

// static attributes (if any)

}// of namespace AnnotatorLib

/************************************************************
 End of Frame class body
 ************************************************************/
