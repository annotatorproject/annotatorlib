// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Annotator_AnnotatorLib_Loader_LoaderFactory_BODY

/************************************************************
 LoaderFactory class body
 ************************************************************/

// include associated header file
#include "AnnotatorLib/Loader/LoaderFactory.h"
#include "AnnotatorLib/Loader/XMLLoader.h"
#include "AnnotatorLib/Loader/JSONLoader.h"
#include "AnnotatorLib/Loader/SQLLoader.h"

// Derived includes directives

namespace AnnotatorLib {
namespace Loader {

// static attributes (if any)


AbstractLoader *LoaderFactory::createLoader(std::string type)
{
    if("xml" == type)
        return createLoader(AnnotatorLib::StorageType::XML);
    if("json" == type)
        return createLoader(AnnotatorLib::StorageType::JSON);
    if("sql" == type)
        return createLoader(AnnotatorLib::StorageType::SQL);
    if("sqlite" == type)
        return createLoader(AnnotatorLib::StorageType::SQLITE);
    return createLoader(AnnotatorLib::StorageType::UNKNOWN);
}

AbstractLoader *LoaderFactory::createLoader(
        AnnotatorLib::StorageType type) {
    switch(type){
    case StorageType::XML:
        return new XMLLoader();
    case StorageType::JSON:
        return new JSONLoader();
    case StorageType::SQL:
        return new SQLLoader();
    case StorageType::SQLITE:
        return nullptr;
    default:
        return nullptr;
    }
}

} // of namespace Loader
} // of namespace AnnotatorLib

/************************************************************
 End of LoaderFactory class body
 ************************************************************/
