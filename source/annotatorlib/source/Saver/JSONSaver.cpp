// --------------------------------------------------------
// Code generated by Papyrus C++
// --------------------------------------------------------

#define Annotator_AnnotatorLib_Saver_JSONSaver_BODY

/************************************************************
 JSONSaver class body
 ************************************************************/

// include associated header file
#include <QDebug>
#include <QFile>
#include <QJsonArray>
#include <QJsonDocument>

#include "AnnotatorLib/Annotation.h"
#include "AnnotatorLib/Attribute.h"
#include "AnnotatorLib/Frame.h"
#include "AnnotatorLib/Object.h"
#include "AnnotatorLib/Saver/JSONSaver.h"
#include "AnnotatorLib/Session.h"

// Derived includes directives

namespace AnnotatorLib {
namespace Saver {

void JSONSaver::saveAnnotation(Annotation annotation) {}

void JSONSaver::setPath(std::string path) { this->path = path; }

StorageType JSONSaver::getType() { return AnnotatorLib::StorageType::JSON; }

void JSONSaver::saveSession(Session *session) {
  this->session = sessionToJson(session);
}

bool JSONSaver::close() {
  save();
  return true;
}

QJsonObject JSONSaver::sessionToJson(Session *session) {
  QJsonObject json;

  // insert list of objects
  QJsonArray objects;
  for (Object *object : session->getObjects()) {
    if (object->hasAnnotations()) objects.append(objectToJson(object));
  }
  json["objects"] = objects;

  // insert list of attributes
  QJsonArray attributes;
  for (Attribute *attribute : session->getAttributes()) {
    attributes.append(attributeToJson(attribute));
  }
  json["attributes"] = attributes;

  // insert list of annotations
  QJsonArray annotations;
  for (Annotation *annotation : session->getAnnotations()) {
    annotations.append(annotationToJson(annotation));
  }
  json["annotations"] = annotations;

  // insert list of classes
  QJsonArray classes;
  for (Class *c : session->getClasses()) {
    classes.append(classToJson(c));
  }
  json["classes"] = classes;

  // insert list of frames
  QJsonArray frames;
  for (Frame *frame : session->getFrames()) {
    if (frame->hasAnnotations()) frames.append(frameToJson(frame));
  }
  json["frames"] = frames;

  return json;
}

QJsonObject JSONSaver::attributeToJson(Attribute *attribute) {
  QJsonObject json;
  json["id"] = QString::number(attribute->getId());
  json["name"] = QString::fromStdString(attribute->getName());
  json["type"] = QString::fromStdString(
      AnnotatorLib::AttributeTypeToString(attribute->getType()));
  json["default"] =
      QString::fromStdString(attribute->getDefaultValue()->toString());
  return json;
}

QJsonObject JSONSaver::annotationToJson(Annotation *annotation) {
  QJsonObject json;
  json["id"] = QString::number(annotation->getId());
  json["object"] = QString::number(annotation->getObject()->getId());
  json["frame"] = QString::number(annotation->getFrame()->getFrameNumber());

  json["x"] = QString::number(annotation->getX());
  json["y"] = QString::number(annotation->getY());
  json["width"] = QString::number(annotation->getWidth());
  json["height"] = QString::number(annotation->getHeight());
  json["type"] = QString::fromStdString(
      AnnotatorLib::AnnotationTypeToString(annotation->getType()));

  if (annotation->getPrevious() != nullptr) {
    json["previous"] = QString::number(annotation->getPrevious()->getId());
  }

  if (annotation->getNext() != nullptr) {
    json["next"] = QString::number(annotation->getNext()->getId());
  }

  // insert list of attributes
  QJsonArray attributes;
  for (Attribute *attribute : annotation->getAttributes()) {
    attributes.append(QString::number(attribute->getId()));
  }
  json["attributes"] = attributes;

  return json;
}

QJsonObject JSONSaver::frameToJson(Frame *frame) {
  QJsonObject json;

  json["number"] = QString::number(frame->getFrameNumber());

  // insert list of attributes
  QJsonArray attributes;
  for (Attribute *attribute : frame->getAttributes()) {
    attributes.append(QString::number(attribute->getId()));
  }
  json["attributes"] = attributes;

  // insert list of annotations
  QJsonArray annotations;
  for (Annotation *annotation : frame->getAnnotations()) {
    annotations.append(QString::number(annotation->getId()));
  }
  json["annotations"] = annotations;

  return json;
}

QJsonObject JSONSaver::objectToJson(Object *object) {
  QJsonObject json;
  json["id"] = QString::number(object->getId());
  json["name"] = QString::fromStdString(object->getName());
  json["class"] = QString::number(object->getClass()->getId());

  // insert list of attributes
  QJsonArray attributes;
  for (Attribute *attribute : object->getAttributes()) {
    attributes.append(QString::number(attribute->getId()));
  }
  json["attributes"] = attributes;

  // insert list of annotations
  QJsonArray annotations;
  for (Annotation *annotation : object->getAnnotations()) {
    annotations.append(QString::number(annotation->getId()));
  }
  json["annotations"] = annotations;

  // insert list of frames
  QJsonArray frames;
  for (Frame *frame : object->getFrames()) {
    frames.append(QString::number(frame->getFrameNumber()));
  }
  json["frames"] = frames;

  return json;
}

QJsonObject JSONSaver::classToJson(Class *c) {
  QJsonObject json;
  json["id"] = QString::number(c->getId());
  json["name"] = QString::fromStdString(c->getName());
  return json;
}

void JSONSaver::save() {
  QFile file(QString::fromStdString(this->path));
  if (file.open(QIODevice::WriteOnly | QIODevice::Text)) {
    QJsonDocument document;
    // QJsonObject object;
    // object["session"] = this->session;
    document.setObject(this->session);
    file.write(document.toJson());
  }
  file.close();
}

// static attributes (if any)

}  // of namespace Saver
}  // of namespace AnnotatorLib

/************************************************************
 End of JSONSaver class body
 ************************************************************/
